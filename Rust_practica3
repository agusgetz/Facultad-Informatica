Ejercicio 1 practica 3

/*Nota: Para todos los ejercicios realizar los tests de unidad correspondientes.

1- Escribir un programa que defina una estructura Persona que tenga campos para el
nombre, la edad y la dirección(que puede ser nulo al momento de la creación de una
persona). Para dicha estructura implemente los siguientes métodos:
➢ new: que pasando los parámetros correspondientes, crea una Persona y la retorna.
➢ to_string: que retorna un string con los datos de la persona concatenados sobre el
mensaje ejecutado por ej:
person.to_string() , donde person es una variable del tipo Persona.
➢ obtener_edad: retorna la edad de la persona.
➢ actualizar_direccion(nueva_direccion)*/

fn main() {

impl Persona {
fn new (nombre:String, edad:u32, direccion:Option <String> ) -> Persona {
Persona {nombre,edad,direccion}
}
fn nueva_persona (&mut self,nombre:String, edad:u32, direccion:Option <String> ) {
self.nombre=nombre;
self.edad=edad;
self.direccion=direccion}
fn to_string (&self)-> String {
let a: String = self.edad.to_string();
let b: String = self.nombre.to_string();
let mut c: String = "sin direccion".to_string();
if let Some (valor) = &self.direccion {c= valor.to_string()};
let mut output:String = a;
output.push_str(&b);
output.push_str(&c);
return output
}
fn obtener_edad (&self) -> u32{
let output:u32 = self.edad;
output
}
fn nueva_direccion (&mut self, direccion:Option<String> ) {
self.direccion = direccion;
}
}
struct Persona {
nombre:String,
edad:u32,
direccion:Option <String> ,
}
let mut persona1 : Persona = Persona {nombre: "Fernanda".to_string(),
edad: 45, direccion: Some ("calle 9".to_string()) };
println!(" {}",persona1.to_string());
println!(" {}",persona1.obtener_edad());
persona1.nueva_direccion(Some ("calle 14".to_string()));
println!(" {}",persona1.to_string());
let mut persona2 : Persona = Persona {nombre: " ".to_string(), edad: 00, direccion: None };
println!(" {}",persona2.to_string());
persona2.nueva_persona("Martin".to_string(), 28, Some ("calle 67".to_string()));
println!(" {}",persona2.obtener_edad());
persona2.nueva_direccion(Some ("calle 56".to_string()));
println!(" {}",persona2.to_string());
let mut persona3 : Persona = Persona {nombre: " ".to_string(), edad: 00, direccion: None };
println!(" {}",persona3.to_string());
persona3.nueva_persona("Pedro".to_string(), 65, Some ("calle 72".to_string()));
println!(" {}",persona3.obtener_edad());
persona3.nueva_direccion(None);
println!(" {}",persona3.to_string());
let mut persona4:Persona = Persona::new("Laura".to_string(), 50, None);
println!(" {}",persona4.to_string());
}
#[test]
fn prueba_persona_obtener_edad (){
struct Persona {
nombre:String,
edad:u32,
direccion:Option <String> ,
}
impl Persona {
fn obtener_edad (&self) -> u32{
let output:u32 = self.edad;
output
} }

let persona1 : Persona = Persona {nombre: "Fernanda".to_string(),
edad: 45, direccion: Some ("calle 9".to_string()) };
let e= persona1.obtener_edad();
assert_eq!(e, 45);
}


#[test]
fn prueba_nueva_direccion(){

struct Persona {
nombre:String,
edad:u32,
direccion:Option <String> ,
}

impl Persona {
fn nueva_direccion (&mut self, direccion:Option<String> ) {
self.direccion = direccion;
}
}

let mut persona1 : Persona = Persona {nombre: "Fernanda".to_string(),
edad: 45, direccion: Some ("calle 9".to_string()) };
let d = persona1.nueva_direccion(Some ("calle 14".to_string()));
assert_eq!(d, ());
}

#[test]
fn prueba_to_string(){

struct Persona {
nombre:String,
edad:u32,
direccion:Option <String> ,
}
impl Persona {
fn to_string (&self)-> String {
let a: String = self.edad.to_string();
let b: String = self.nombre.to_string();
let mut c: String = "sin direccion".to_string();

if let Some (valor) = &self.direccion {c= valor.to_string()};
let mut output:String = a;
output.push_str(&b);
output.push_str(&c);
return output
}
}

let persona1 : Persona = Persona {nombre: "_Fernanda".to_string(),
edad: 45, direccion: Some ("_calle 9".to_string()) };
let s = persona1.to_string();
assert_eq!(s, "45_Fernanda_calle 9");
}




Ejercicio 2 practica 3


* Escribir un programa que defina la estructura Rectángulo que tenga campos para la
longitud y el ancho. Para dicha estructura implemente los siguientes métodos:
➢ new: que pasando los parámetros correspondientes, crea un Rectángulo y lo
retorna.
➢ calcular_area: calcular el área y la retorna.
➢ calcular_perimetro: calcula el perímetro y lo retorna.
➢ es_cuadrado: retorna true si es cuadrado, false caso contrario */

pub struct Rectangulo {
ancho: u32 ,
alto: u32
}
impl Rectangulo {
fn new (ancho:u32, alto:u32) -> Rectangulo{
Rectangulo {ancho,alto}
}
fn calcular_perimetro (&self) -> u32 {
let resultado:u32;
resultado = self.ancho + self.alto;
resultado
}
fn calcular_area (&self) -> u32 {
let resultado:u32;
resultado = self.ancho * self.alto;
resultado
}
fn es_cuadrado (&self) -> bool {
let resultado:bool;
if self.ancho == self.alto {resultado=true} else {resultado= false};
resultado
}
}
fn main () {
let estruct: Rectangulo = Rectangulo::new(23,54);
println! ( "{}",estruct.calcular_area());
println! ( "{}",estruct.es_cuadrado());
println! ( "{}",estruct.calcular_perimetro());
}


#[test]
fn prueba_calcular_area (){
let r : Rectangulo = Rectangulo::new(23,54);
let r1= r.calcular_area();
assert_eq!(r1, 1242);
}

#[test]
fn prueba_es_cuadraado (){
let r : Rectangulo = Rectangulo::new(23,54);
let r2= r.es_cuadrado();
assert_eq!(r2, false);
}
#[test]
fn prueba_calcular_perimetro (){
let r : Rectangulo = Rectangulo::new(23,54);
let r3= r.calcular_perimetro();
assert_eq!(r3, 77);
}



Ejercicio 3 practica 3


/* Escribir un programa que defina una estructura Fecha que tenga campos para el día, el
mes y el año. Para dicha estructura implemente los siguientes métodos:
➢ new: que pasando los parámetros correspondientes, crea una Fecha y la retorna.
➢ es_fecha_valida: retorna true si es una fecha válida, false caso contrario.//tenga en
cuenta los años bisiestos también.
➢ es_bisiesto: retorna true si el año de la fecha pertenece a un año bisiesto.
➢ sumar_dias(dias): suma la cantidad de días a la fecha, modificándose
➢ restar_dias(dias): resta la cantidad de días a la fecha, modificándose
➢ es_mayor(una_fecha): que retorna true si la fecha que recibe el mensaje es mayor a
la fecha pasada por parámetro. */

fn main () {

struct Fecha {
dia: u32 ,
mes: u32,
año: u32
}
impl Fecha {
fn new (dia:u32, mes:u32, año:u32) -> Fecha{
Fecha {dia, mes, año}
}
fn es_fecha_valida (&self) -> bool {
let output:bool;
if self.dia >=1 && self.dia <= 31 && self.mes >=1 && self.mes <= 12
&& self.año >=1984 && self.año <= 2026 {output = true}
else { output = false};
output
}
fn es_biciesto (&self) -> bool {
let output:bool;
if self.año == 2024 || self.año == 2020 || self.año == 2016 || self.año == 2012 || self.año == 2008 ||
self.año == 2004 || self.año == 2000 || self.año == 1996 || self.año == 1992 ||
self.año == 1988 || self.año == 1986 {output = true}
else
{output = false};
output
}
fn sumar_dias (&mut self, dias:u32) {
self.dia= self.dia + dias;
}
fn restar_dias (&mut self, dias:u32) {
self.dia= self.dia - dias;
}
fn es_mayor (& self, f:&Fecha) -> bool {
let output:bool;
if (f.año < self.año ) || (f.año == self.año && f.mes < self.mes) ||
(f.año == self.año && f.mes == self.mes && f.dia < self.dia) {output = true}
else
{ output = false};
output
}
}

let mut f:Fecha= Fecha::new(56, 23, 45);
let mut d:Fecha= Fecha::new(2, 6, 1990);
let g:Fecha=Fecha::new(5, 8, 1991);
println! ("{},{},{}",f.es_biciesto(),f.es_fecha_valida(),f.es_mayor(&g));
println! ("{},{},{}",d.es_biciesto(),d.es_fecha_valida(),d.es_mayor(&g));
}



#[test]
fn prueba_es_biciesto(){

struct Fecha {
dia: u32 ,
mes: u32,
año: u32
}
impl Fecha {
fn new (dia:u32, mes:u32, año:u32) -> Fecha{
Fecha {dia, mes, año}
}

fn es_biciesto (&self) -> bool {
let output:bool;
if self.año == 2024 || self.año == 2020 || self.año == 2016 || self.año == 2012 || self.año == 2008 ||
self.año == 2004 || self.año == 2000 || self.año == 1996 || self.año == 1992 ||
self.año == 1988 || self.año == 1986 {output = true}
else
{output = false};
output
}
}

let p:Fecha=Fecha::new(5, 8, 1991);
let r:bool= p.es_biciesto();
assert_eq!(r, false);

}

#[test]
fn prueba_es_fecha_valida(){
struct Fecha {
dia: u32 ,
mes: u32,
año: u32
}
impl Fecha {
fn new (dia:u32, mes:u32, año:u32) -> Fecha{
Fecha {dia, mes, año}
}
fn es_fecha_valida (&self) -> bool {
let output:bool;
if self.dia >=1 && self.dia <= 31 && self.mes >=1 && self.mes <= 12
&& self.año >=1984 && self.año <= 2026 {output = true}
else { output = false};
output
}
}

let d:Fecha= Fecha::new(2, 6, 1990);
let r= d.es_fecha_valida();
assert_eq!(r, true);
}

#[test]
fn prueba_es_mayor(){
struct Fecha {
dia: u32 ,
mes: u32,
año: u32
}
impl Fecha {
fn new (dia:u32, mes:u32, año:u32) -> Fecha{
Fecha {dia, mes, año}
}

fn es_mayor (&self, f:&Fecha) -> bool {

let output:bool;
if (f.año < self.año ) || (f.año == self.año && f.mes < self.mes) ||
(f.año == self.año && f.mes == self.mes && f.dia < self.dia) {output = true}
else
{ output = false};
output
}
}

let d:Fecha= Fecha::new(2, 6, 1990);
let g:Fecha=Fecha::new(5, 8, 1991);
let r= g.es_mayor(&d);
assert_eq!(r, true);
}



#[test]
fn prueba_es_biciesto(){
struct Fecha {
dia: u32 ,
mes: u32,
año: u32
}
impl Fecha {
fn new (dia:u32, mes:u32, año:u32) -> Fecha{
Fecha {dia, mes, año}
}
fn es_biciesto (&self) -> bool {
let output:bool;
if self.año == 2024 || self.año == 2020 || self.año == 2016 || self.año == 2012 || self.año == 2008 ||
self.año == 2004 || self.año == 2000 || self.año == 1996 || self.año == 1992 ||
self.año == 1988 || self.año == 1986 {output = true}
else
{output = false};
output
}
}
let p:Fecha=Fecha::new(5, 8, 1991);
let r:bool= p.es_biciesto();
assert_eq!(r, false);
}
#[test]
fn prueba_es_fecha_valida(){
struct Fecha {
dia: u32 ,
mes: u32,
año: u32
}
impl Fecha {
fn new (dia:u32, mes:u32, año:u32) -> Fecha{
Fecha {dia, mes, año}
}
fn es_fecha_valida (&self) -> bool {
let output:bool;
if self.dia >=1 && self.dia <= 31 && self.mes >=1 && self.mes <= 12
&& self.año >=1984 && self.año <= 2026 {output = true}
else { output = false};
output
}
}
let d:Fecha= Fecha::new(2, 6, 1990);
let r= d.es_fecha_valida();
assert_eq!(r, true);
}
#[test]
fn prueba_es_mayor(){
struct Fecha {
dia: u32 ,
mes: u32,
año: u32
}
impl Fecha {
fn new (dia:u32, mes:u32, año:u32) -> Fecha{
Fecha {dia, mes, año}
}
fn es_mayor (&self, f:&Fecha) -> bool {
let output:bool;
if (f.año < self.año ) || (f.año == self.año && f.mes < self.mes) ||
(f.año == self.año && f.mes == self.mes && f.dia < self.dia) {output = true}
else
{ output = false};
output
}
}
let d:Fecha= Fecha::new(2, 6, 1990);
let g:Fecha=Fecha::new(5, 8, 1991);
let r= g.es_mayor(&d);
assert_eq!(r, true);
}


#[test]
fn sumar_dias(){
struct Fecha {
dia: u32 ,
mes: u32,
año: u32
}
impl Fecha {
fn new (dia:u32, mes:u32, año:u32) -> Fecha{
Fecha {dia, mes, año}
}

fn sumar_dias (&mut self, dias:u32) {
self.dia= self.dia + dias;
}
}

let mut d:Fecha= Fecha::new(10, 6, 1990);
d.sumar_dias(5);
let r= d.dia;
assert_eq!(r, 15);
}

#[test]
fn restar_dias(){
struct Fecha {
dia: u32 ,
mes: u32,
año: u32
}
impl Fecha {
fn new (dia:u32, mes:u32, año:u32) -> Fecha{
Fecha {dia, mes, año}
}

fn restar_dias (&mut self, dias:u32) {
self.dia= self.dia - dias;
}
}

let mut d:Fecha= Fecha::new(2, 6, 1990);
d.restar_dias(1);
assert_eq!(d.dia, 1);
}


