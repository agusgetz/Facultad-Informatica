
/1-Definir la función llamada es_par que recibe como parámetro un número entero y retorna
//true si el número es par, false caso contrario.

pub fn es_par (num:i32) -> bool{
let estado:bool= num%2==0;
return estado
}

fn main() {
let num = 5;

println!("{}",es_par(num));
}

pub fn es_par (num:i32) -> bool{
let estado:bool= num%2==0;
return estado }
fn main () {
let num = 5;
println!("{}",es_par(num));

}
#[test]
fn prueba_es_par (){
let num = 5;
let result:bool= es_par(num);
assert_eq!(result, false)
}

//Definir la función llamada es_primo que recibe un número entero positivo mayor a 1 y
//retorna true si es primo, false caso contrario.
//
fn dividir (num:i32)-> bool {
let mut estado:bool=true; let mut salir: bool=true;
let mut a: i32 = 2;
while a < num && salir {let mut rst:i32 = num%a; if rst ==0 {estado=false; salir=false};a+=1}
return estado
}

pub fn es_primo (num:i32) -> bool {
let mut estado:bool=true;
if num.is_negative() {estado=false}
else if num == 0 || num == 1 {estado=false}
else if dividir(num) == false {estado=false}
return estado
}

fn main() {
let num: i32 = 10;

println!("{}",es_primo(num));
}

#[test]
fn prueba_es_primo (){
let num: i32 = 10;
let result:bool= es_primo(num);
assert_eq!(result, false)
}


//Definir la función llamada suma_pares que recibe como parámetro un arreglo de
//números enteros y retorna la suma de los números pares.

pub fn es_par (num:i32) -> bool{
let estado:bool= num%2==0;
return estado
}

pub fn suma_pares (array:[i32 ;10]) -> i32 {
let mut total:i32; total=0;
for elemento in array {if es_par(elemento) {total+=elemento}};
return total}

fn main() {
let array:[i32;10]=[6,8,29,4,5,1,2,5,6,9];
println!("{}",suma_pares(array));
}

#[test]
fn prueba_sumar_pares (){
let array:[i32;10]=[6,8,29,4,5,1,2,5,6,9];
let result:i32= suma_pares(array);
assert_eq!(result, 26)
}

//Definir la función llamada cantidad_impares que recibe como parámetro un arreglo de
//números enteros y retorna la cantidad de números impares.

pub fn es_impar (num:i32) -> bool{
let estado:bool= num%2!=0;
return estado
}

pub fn cantidad_impares (array:[i32 ;10]) -> i32 {
let mut total:i32; total=0;
for elemento in array {if es_impar(elemento) {total+=1}};
return total}

fn main() {
let array:[i32;10]=[6,8,29,4,5,1,2,5,6,9];
println!("{}",cantidad_impares(array))
}
#[test]
fn prueba_cantidad_impares (){
let array:[i32;10]=[6,8,29,4,5,1,2,5,6,9];
let result= cantidad_impares(array);
assert_eq!(result, 5)
}

/Defina la función llamada duplicar_valores que recibe un arreglo de números flotantes y
//retorna un arreglo nuevo con los valores duplicados del parámetro.

pub fn duplicar_valores (mut array:[f32 ;5]) -> [f32 ;5] {
let mut i: usize=0;
for elemento in array {array[i]=elemento*2.0; i+=1}
array}

fn main() {
let mut array2:[f32;5];
let array:[f32;5]=[6.0,8.0,29.0,4.0,5.0];
array2=duplicar_valores(array);
for elemento in array {println!("{}",elemento)};
for elemento in array2 {println!("{}",elemento)};
}

#[test]
fn prueba_duplicar_valores (){
let array:[f32;5]=[6.0,8.0,29.0,4.0,5.0];
let result: [f32; 5]= duplicar_valores(array);
assert_eq!(result, [12.0, 16.0, 58.0, 8.0, 10.0])
}

//Definir la función llamada longitud_de_cadenas que recibe un arreglo de String y retorna
//un arreglo con la longitud de las cadenas del parámetro, correspondiéndose en posición del
//arreglo.

pub fn longitud_de_cadena (array: &[String;3]) -> [usize;3] {
let mut long:[usize;3]=[0,0,0]; let mut i: usize=0;
for elemento in array {long[i]= elemento.len();i+=1}
return long}

fn main() {
let a="hola".to_string();let b="pedro".to_string(); let c="armando".to_string();
let array:[String;3]=[a,b,c];
let array2:[usize;3] = longitud_de_cadena(&array);
for elemento in array2 {println!("{}",elemento)};
}

#[test]
fn prueba_long_cadena (){
let a="hola".to_string();let b="pedro".to_string(); let c="armando".to_string();
let array:[String;3]=[a,b,c];
let result:[usize;3] = longitud_de_cadena(&array);
assert_eq!(result, [4,5,7])
}
//Definir la función llamada cantidad_de_mayores que recibe como parámetro un arreglo
//de números enteros y un número entero llamado límite. Esta función retorna la cantidad de
//números mayores al límite que tiene el arreglo.

pub fn cantidad_de_mayores (array:[i32;10],num:i32) -> i32{
let mut total:i32=0;
for elemento in array {if num > elemento{total+=1}}
return total}

fn main() {
let num: i32=6;
let arrey :[i32;10]=[23,45,6,7,9,3,2,5,64,7];
println!("{}",cantidad_de_mayores(arrey,num))
}

#[test]
fn prueba_cantidad_de_mayores (){
let num: i32=6;
let arrey :[i32;10]=[23,45,6,7,9,3,2,5,64,7];
let result = cantidad_de_mayores(arrey,num);
assert_eq!(result, 3)
}

/Definir la función llamada sumar_arreglos que recibe 2 arreglos del mismo tamaño de
//números flotantes y retorna un nuevo arreglo que contiene la suma de los elementos de los
//arreglos pasados por parámetro, correspondiéndose el resultado con cada posición de los
//arreglos pasados por parámetro.


pub fn sumar_arreglos (arrey1:[f32;10],arrey2:[f32;10]) -> [f32;10]{
let mut arrey3:[f32;10]=[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]; let mut i:usize=0;
for elemento in arrey1 {arrey3[i]= elemento + arrey2[i];i+=1}
return arrey3}

fn main() {
let arrey1:[f32;10]=[2.4,5.6,7.5,6.8,7.3,7.8,3.6,2.6,3.7,24.7];
let arrey2:[f32;10]=[34.6,76.5,8.7,6.5,9.9,1.2,23.6,4.12,4.5,6.6];
let arrey3 :[f32;10]=sumar_arreglos(arrey1,arrey2);
for elemento in arrey3 {println!("{}",elemento)}
}
#[test]
fn prueba_sumar_arreglos (){
let arrey1:[f32;10]=[2.4,5.6,7.5,6.8,7.3,7.8,3.6,2.6,3.7,24.7];
let arrey2:[f32;10]=[34.6,76.5,8.7,6.5,9.9,1.2,23.6,4.12,4.5,6.6];
let result:[f32;10]=sumar_arreglos(arrey1,arrey2);
assert_eq!(result, [37.0, 82.1, 16.2, 13.3, 17.2, 9.0, 27.2, 6.72, 8.2, 31.300001])
}
//Definir la función llamada cantidad_en_rango que recibe 3 parámetros: 1 arreglo de
//enteros, un número entero llamado inferior y otro número entero llamado superior. Esta
//función retorna la cantidad de números del arreglo que están entre el rango de los
//parámetros inferior y superior inclusive.

pub fn cantidad_de_rango (array1:[i32;10],num1:i32,num2:i32) -> i32{
let mut total:i32=0;
for elemento in array1 {if elemento >= num1 && elemento <= num2 {total+=1}}
return total}

fn main() {
let num1: i32=18;let num2: i32=99;
let arrey :[i32;10]=[23,45,6,7,9,3,2,5,64,7];
println!("{}",cantidad_de_rango(arrey,num1,num2))
}

#[test]
fn prueba_cantidad_de_rango (){
let num1: i32=18;let num2: i32=99;
let arrey :[i32;10]=[23,45,6,7,9,3,2,5,64,7];
let result= cantidad_de_rango(arrey,num1,num2);
assert_eq!(result, 3)
}


/Definir la función llamada cantidad_de_cadenas_mayor_a que recibe como parámetros
//un arreglo de String y un entero llamado límite. Esta función retorna la cantidad de Strings
//del arreglo que son de longitud mayor al parámetro límite.

pub fn cantidad_de_cadenas_mayor_a (array: &[String;5],num:usize) -> usize {
let mut i: usize=0; let mut total:usize=0;
for elemento in array {if elemento.len() > num {total+=1}}
return total}

fn main() {
let num:usize=4;
let array:[String;5]=["hola".to_string(),"pedro".to_string(),"armando".to_string(),"leandro".to_string(),"ana".to_string()];
{println!("{}",cantidad_de_cadenas_mayor_a(&array,num))};
}

#[test]
fn prueba_cantidad_de_cadenas_mayor_a (){
let num:usize=6;
let array:[String;5]=["hola".to_string(),"pedro".to_string(),"armando".to_string(),"leandro".to_string(),"ana".to_string()];
let result= cantidad_de_cadenas_mayor_a(&array,num);
assert_eq!(result, 2)
}

/Definir la función llamada multiplicar_valores que recibe como parámetro un arreglo de
//enteros y otro número entero llamado factor. Esta función multiplica los valores del arreglo
//por el parámetro factor modificándolo.


//ademas crea un nuevo vector
pub fn multiplicar_valores (array:&mut [i32 ;5],num:i32) -> [i32 ;5] {
let mut i:usize=0; let mut dato: [i32 ;5]= [0,0,0,0,0];
for elemento in array {*elemento=*elemento*num;dato[i]=*elemento; i+=1}
dato}

fn main() {
let mut array:[i32;5]=[12,5,78,4,9]; let num:i32=5;
for elemento in array {println!("{}",elemento)};
let dato= multiplicar_valores(&mut array, num);
for elemento in dato {println!("{}",elemento)}
}


//...................................................................

pub fn multiplicar_valores (array:&mut [u32 ;5],num:u32) {
for elemento in array {*elemento=*elemento*num}
}

fn main() {
let mut array:[u32;5]=[12,5,78,4,9]; let num:u32=5;
multiplicar_valores(&mut array, num);
for elemento in array {println!("{}",elemento)
}
}
#[test]
fn prueba_multiplicar_valores (){
let mut array:[u32;5]=[12,5,78,4,9]; let num:u32=5;
for elemento in array {println!("{}",elemento)};
multiplicar_valores(&mut array, num);
let result:[u32;5]= array;
assert_eq!(result, [60, 25, 390, 20, 45])
}



/Definir una función llamada reemplazar_pares que recibe un arreglo de enteros y
//reemplaza todos los números pares por -1.

pub fn es_par (num:i32) -> bool {
let dato:bool;
if num%2==0 {dato=true}
else {dato=false}
dato
}
pub fn reemplazar_pares (array:&mut [i32 ;5]) {
for elemento in array {if es_par (*elemento){*elemento = -1 }}
}
fn main() {
let mut array:[i32;5]=[12,5,78,4,9];
for elemento in array {println!("{}",elemento)};
reemplazar_pares (&mut array);
for elemento in array {println!("{}",elemento)}
}


#[test]
fn prueba_reemplazar_pares(){
let mut array:[i32;5]=[12,5,78,4,9];
reemplazar_pares (&mut array);
let result= array;
assert_eq!(result, [-1,5, -1, -1, 9])
}


//Definir una función llamada ordenar_nombres que recibe un arreglo de String y los
//ordena en orden alfabético.

pub fn ordenar_nombres (mut array: [String;5]) -> [String;5] {
array.sort();
array
}
fn main() {
let mut array:[String;5]=["hola".to_string(),"buenos dias".to_string(),
"mañana".to_string(), "jueves".to_string(),"domingo".to_string()];
for elemento in &array {println!("{}",elemento)};
array = ordenar_nombres(array);
for elemento in &array {println!("{}",elemento)}
}

#[test]
fn prueba_ordenar_string() {
let mut array:[String;5]=["hola".to_string(),"buenos dias".to_string(),
"mañana".to_string(), "jueves".to_string(),"domingo".to_string()];
array = ordenar_nombres(array);
assert_eq!(array, ["buenos dias", "domingo", "hola", "jueves", "mañana"])
}



Definir una función llamada incrementar que recibe como parámetro un número flotante
//e incrementa en 1 su valor.

pub fn incrementar (mut num:f32) -> f32 {
num+=1.0;
println!("{}",num);
num
}
fn main() {
let mut num: f32=8.0;
num=incrementar(num);
println!("{}",num)
}


#[test]
fn prueba_incrementar (){
  let mut num: f32=8.0;
     num=incrementar(num);
     let result = num;
assert_eq!(result, 9.0)
}


